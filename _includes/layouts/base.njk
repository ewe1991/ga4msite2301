<!doctype html>
<html lang="{{ metadata.language }}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">

		<!-- Google tag (gtag.js) -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-D1K0ZZVJLH"></script>
		<script>
		window.dataLayer = window.dataLayer || [];
		function gtag(){dataLayer.push(arguments);}
		gtag('js', new Date());

		gtag('config', 'G-D1K0ZZVJLH');
		</script>

		{#- Atom and JSON feeds included by default #}
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">
		<link rel="alternate" href="/feed/feed.json" type="application/json" title="{{ metadata.title }}">

		{#- Uncomment this if you’d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

		{#-
		CSS bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. You can add to them using `{% css %}`
		2. You can get from them using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		3. You can do the same for JS: {% js %}{% endjs %} and <script>{% getBundle "js" %}</script>
		4. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add an arbitrary string to the bundle #}
		{%- css %}* { box-sizing: border-box; }{% endcss %}
		{#- Add the contents of a file to the bundle #}
		{%- css %}{% include "public/css/index.css" %}{% endcss %}
		{#- Or add from node_modules #}
		{# {%- css %}{% include "node_modules/prismjs/themes/prism-okaidia.css" %}{% endcss %} #}

		{#- Render the CSS bundle using Inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>
		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}
	</head>
	<body>
		<a href="#skip" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link">{{ metadata.title }}</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a class="nav-link" href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
				{%- endfor %}
				</ul>
			</nav>
		</header>

		<main id="skip">

			<h1>Tracking</h1>

			<section>
				<h2>Video Tracking</h2>

				<a href="#">New page</a>

				<button id="video-01" class="video" data-ga="action_video_play">Video 01</button>
				<button id="video-01-01" class="video" data-ga="action_video_play">Video 01-01</button>
				<button id="video-01-02" class="video" data-ga="action_video_play">Video 01-02</button>

				<button id="video-02" class="video" data-ga="action_video_play">Video 02</button>
				<button id="video-02-01" class="video" data-ga="action_video_play">Video 02-01</button>
				<button id="video-02-02" class="video" data-ga="action_video_play">Video 02-02</button>

				<video width="320" height="240" controls data-ga="action_video" data-ga-title="Tennis">
					<source src="https://assets.codepen.io/16721/video_tpb_tennis.mp4" type="video/mp4">
				</video>

				<video width="320" height="240" controls data-ga="action_video" data-ga-title="Touch">
					<source src="https://assets.codepen.io/16721/video_tpb_touch.mp4" type="video/mp4">
				</video>

				<video width="320" height="240" controls data-ga="action_video" data-ga-title="Cake">
					<source src="https://assets.codepen.io/16721/video_tpb_choc_cake.mp4" type="video/mp4">
				</video>
			</section>

			<hr>

			<section>
				<h2>e-commmerce </h2>

				<button type="submit" name="add" class="" data-ga="action_click_add_to_cart"><span>Add to cart</span></button>

				<button type="submit" name="checkout" class="" data-ga="action_click_check_out"><span>Check Out</span></button>

				<a href="/cart" data-ga="action_click_cart">View Cart</a>


				<details>
                    <summary data-ga="expand_enquire_form">
                      Enquire about this item
                    </summary>
                    <div>
                    <form method="post" action="" id="EnquireForm" accept-charset="UTF-8" class="c-form isolate">

						<fieldset class="mb-32">

						<legend class="f-body mb-16 color-black visually-hidden">Your Contact Information</legend>

						<div class="grid sm:grid-cols-2 gap-16 mb-16">

							<input class="c-form__input" autocomplete="given-name" type="text" id="EnquireFrom-firstName" name="contact[First name]" value="" placeholder="First name">
							<label class="visually-hidden" for="EnquireFrom-firstName">First name</label>

							<input class="c-form__input" autocomplete="family-name" type="text" id="EnquireFrom-lastName" name="contact[Last name]" value="" placeholder="Last name">
							<label class="visually-hidden" for="EnquireFrom-lastName">Last name</label>


							<input autocomplete="email" type="email" id="EnquireFrom-email" class="c-form__input" name="contact[email]" spellcheck="false" autocapitalize="off" value="" aria-required="true" required="required" placeholder="Email">
							<label class="visually-hidden" for="EnquireFrom-email">Email
							<span aria-hidden="true">*</span>
							</label><input type="tel" id="EnquireFrom-phone" class="c-form__input" autocomplete="tel" name="contact[Phone number]" pattern="[0-9\-]*" required="required" value="" placeholder="Phone number">
							<label class="visually-hidden" for="EnquireFrom-phone">Phone number</label>
						</div>

						<div class="grid gap-16">
							<input type="hidden" name="contact[product]" value="Teal Super Solar Ring">
							<label class="visually-hidden" for="EnquireFrom-product">Teal Super Solar Ring</label>
							<textarea rows="3" id="EnquireFrom-body" class="c-form__input" name="contact[If you’d like to provide any additional information please share it here:]" placeholder="If you’d like to provide any additional information please share it here:"></textarea>
							<label class="visually-hidden" for="EnquireFrom-body">If you’d like to provide any additional information please share it here:</label>
						</div>

						</fieldset>

						<div class="contact__button text-center mb-24">

						<button type="submit" class="c-btn c-btn--center c-btn--primary f-btn" data-ga="action_submit_form_enquiry" name="action_submit_form_enquiry">
							Send Enquiry
						</button>

						</div>
					</div>
					</form>
                    </div>
                  </details>
            				

			</section>

				<hr>
			<section>
				<h2>Job Tracking</h2>

				<a href="/job-123" data-ga="action_click_job" aria-label="View {{ JOB_TITLE}}">View Job</a>

				<a href="/job-123-apply" data-ga="action_click_job_apply" aria-label="Apply for {{ JOB_TITLE}}">Apply</a>

				</section>

			{{ content | safe }}
		</main>

		<footer>

		</footer>

		<script>
			// Listen for clicks on the entire window
			document.addEventListener('click', function (event) {

				// If the clicked element has the `.click-me` class, it's a match!
				if (event.target.matches('.video')) {
					// Do something...
				
				dataLayer.push({
				event: "video_item_clicked", 
				name: event.target.textContent                    
				})
				
				}

			});

			// Let's wrap everything inside a function so variables are not defined as globals 
(function() {
    // This is gonna our percent buckets ( 25%-75% ) 
    var divisor = 25;
    // We're going to save our players status on this object. 
    var videos_status = {};
    // This is the funcion that is gonna handle the event sent by the player listeners 
    function eventHandler(e) {
        switch (e.type) {
            // This event type is sent everytime the player updated it's current time, 
            // We're using for the % of the video played. 
        case 'timeupdate':
            // Let's set the save the current player's video time in our status object 
            videos_status[e.target.id].current = Math.round(e.target.currentTime);
            // We just want to send the percent events once 
            var pct = Math.floor(100 * videos_status[e.target.id].current / e.target.duration);
            for (var j in videos_status[e.target.id]._progress_markers) {
                if (pct >= j && j > videos_status[e.target.id].greatest_marker) {
                    videos_status[e.target.id].greatest_marker = j;
                }
            }
            // current bucket hasn't been already sent to GA?, let's push it to GTM
            if (videos_status[e.target.id].greatest_marker && !videos_status[e.target.id]._progress_markers[videos_status[e.target.id].greatest_marker]) {
                videos_status[e.target.id]._progress_markers[videos_status[e.target.id].greatest_marker] = true;
                dataLayer.push({
                    'event': 'html5_video',
                    'video_status': 'progress',
                    'video_provider' : 'generic html5 video player',
                    'video_percent': videos_status[e.target.id].greatest_marker,
                    // We are sanitizing the current video src string, and getting just the video name part
                    'video_title': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])
                });
            }
            break;
            // This event is fired when user's click on the play button
        case 'play':
            dataLayer.push({
                'event': 'html5_video',
                'video_status' : 'play',
                'video_provider' : 'generic html5 video player',
                'video_percent': videos_status[e.target.id].greatest_marker,
                'video_title': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])
            });
            break;
            // This event is fied when user's click on the pause button
        case 'pause':
            if (videos_status[e.target.id].greatest_marker < '75') {
            dataLayer.push({
                'event': 'html5_video',
                'video_status' : 'pause',
                'video_provider' : 'generic html5 video player',
                'video_percent': videos_status[e.target.id].greatest_marker,
                'video_title': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])
            });
            }
            break;
            // If the user ends playing the video, an Finish video will be pushed ( This equals to % played = 100 )  
        case 'ended':
            dataLayer.push({
                'event': 'html5_video',
                'video_status' : 'complete',
                'video_provider' : 'generic html5 video player',
                'video_percent': '100',
                'video_title': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])
            });
            break;
        default:
            break;
        }
    }
    // We need to configure the listeners
    // Let's grab all the the "video" objects on the current page     
    var videos = document.getElementsByTagName('video');
    for (var i = 0; i < videos.length; i++) {
        // In order to have some id to reference in our status object, we are adding an id to the video objects
        // that don't have an id attribute. 
        var videoTagId;
        if (!videos[i].getAttribute('id')) {
            // Generate a random alphanumeric string to use is as the id
            videoTagId = 'html5_video_' + Math.random().toString(36).slice(2);
            videos[i].setAttribute('id', videoTagId);
        }// Current video has alredy a id attribute, then let's use it <img draggable="false" class="emoji" alt="?" src="https://s.w.org/images/core/emoji/2/svg/1f642.svg">
        else {
            videoTagId = videos[i].getAttribute('id');
        }
        // Video Status Object declaration  
        videos_status[videoTagId] = {};
        // We'll save the highest percent mark played by the user in the current video.
        videos_status[videoTagId].greatest_marker = 0;
        // Let's set the progress markers, so we can know afterwards which ones have been already sent.
        videos_status[videoTagId]._progress_markers = {};
        for (j = 0; j < 100; j++) {
            videos_status[videoTagId].progress_point = divisor * Math.floor(j / divisor);
            videos_status[videoTagId]._progress_markers[videos_status[videoTagId].progress_point] = false;
        }
        // On page DOM, all players currentTime is 0 
        videos_status[videoTagId].current = 0;
        // Now we're setting the event listeners. 
        videos[i].addEventListener("play", eventHandler, false);
        videos[i].addEventListener("pause", eventHandler, false);
        videos[i].addEventListener("ended", eventHandler, false);
        videos[i].addEventListener("timeupdate", eventHandler, false);
        videos[i].addEventListener("ended", eventHandler, false);
    }
})();
		</script>
		<!-- Current page: {{ page.url | htmlBaseUrl }} -->
	</body>
</html>
